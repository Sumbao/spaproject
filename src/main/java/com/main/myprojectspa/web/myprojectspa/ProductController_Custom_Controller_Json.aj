// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.web.myprojectspa;

import com.main.myprojectspa.domain.projectspa.Product;
import com.main.myprojectspa.domain.projectspa.util.ApplicationConstant;
import com.main.myprojectspa.service.ProductService;
import com.main.myprojectspa.web.myprojectspa.ProductController;

import java.io.File;
import java.io.IOException;
import java.util.List;

import flexjson.JSONSerializer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;

import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.activation.MimetypesFileTypeMap;
import javax.servlet.http.HttpServletResponse;
import java.nio.file.Files;
import java.io.FileOutputStream;

privileged aspect ProductController_Custom_Controller_Json {

    @RequestMapping(value = "/createproduct", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ProductController.createproduct(MultipartHttpServletRequest multipartHttpServletRequest) throws IOException {
        ResponseEntity<String> status = null;
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            MultipartFile multipathFile = multipartHttpServletRequest.getFile("file");
            String json = multipartHttpServletRequest.getParameter("json");
            Product product = Product.fromJsonToProduct(json);
            List<Product> prolist = Product.createproduct(product.getProductId(), product.getProductName(),product.getProductPicture());
            if (prolist.size() == 0) {
                byte[] bytes = multipathFile.getBytes();
                File path = new File(ApplicationConstant.PATH_FILE + multipathFile.getOriginalFilename());
                FileCopyUtils.copy(bytes, new FileOutputStream(path));
                product.persist();
                return status = new ResponseEntity<String>(headers, HttpStatus.CREATED);
            } else {
                return status = new ResponseEntity<String>(headers, HttpStatus.CONFLICT);
            }
        } catch (Exception e) {
            LOGGER.error("create:{}", e);
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/findallproduct", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.findallproduct() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Product> result = Product.findAllProducts();
//            return new ResponseEntity<String>(Product.toJsonArray(result), headers, HttpStatus.OK);
            return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                    .include("id")
                    .include("version")
                    .include("productId")
                    .include("productName")
                    .include("productDetails")
                    .include("productPrice")
                    .include("productPicture")
                    .include("productTypes.id")
                    .include("productTypes.productTypesName")
                    .include("productTypes.version")
                    .exclude("*")
                    .deepSerialize(result)),headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/loadimage/{id}", method = RequestMethod.GET)
    public ResponseEntity<String> ProductController.loadimage(@PathVariable("id") Long id, HttpServletResponse response) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {

            Product product = Product.findProduct(id);
            String filename = product.getProductPicture();
            String mimeType = new MimetypesFileTypeMap().getContentType(filename);
            response.setContentType(mimeType);
            String imagePath = ApplicationConstant.PATH_FILE + filename;
            File image = new File(imagePath);
            Files.copy(image.toPath(), response.getOutputStream());

            return new ResponseEntity<String>(headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error("Error : {}", e);
            e.printStackTrace();
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value ="/findproduct/{id}",method = RequestMethod.GET,headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.findproduct(@PathVariable("id") Long id) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Product> product = Product.findbyId(id);
            if (product == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }

            return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                    .include("productId")
                    .include("productName")
                    .include("productDetails")
                    .include("productPrice")
                    .exclude("*")
                    .deepSerialize(product)),headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error("Error : {}", e);
            e.printStackTrace();
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value="/findProductbyproducttype/{id}",method=RequestMethod.GET,headers="Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.findProductbyproducttype(@PathVariable("id") Long id) throws IOException{
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try{
            List<Product> product = Product.findProductBytypeid(id);
            if(product == null){
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }else{
                return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                        .include("id")
                        .include("version")
                        .include("productId")
                        .include("productName")
                        .include("productDetails")
                        .include("productPrice")
                        .include("productTypes.id")
                        .include("productTypes.productTypesName")
                        .exclude("*")
                        .deepSerialize(product)),headers, HttpStatus.OK);
            }
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/deleteproductdata/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ProductController.deleteproductdata(@PathVariable("id") Long id) {
        ResponseEntity<String> status = null;
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            Product product = Product.findProduct(id);
            String filename = product.getProductPicture();
            File file = new File(ApplicationConstant.PATH_FILE + filename);
            Boolean filestatus = file.isFile();
            if (filestatus == true) {
                file.delete();
                product.remove();
                return new ResponseEntity<String>(headers, HttpStatus.OK);
            } else {
                product.remove();
                return new ResponseEntity<String>(headers, HttpStatus.CONFLICT);
            }
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/updateproductdata", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ProductController.updateproductdata(MultipartHttpServletRequest multipartdata) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            MultipartFile multipathFile = multipartdata.getFile("fileedit");
            String json = multipartdata.getParameter("jasonedit");
            Product product = Product.fromJsonToProduct(json);
            if (multipathFile == null) {
                Product prodataold = Product.findProduct(product.getId());
                prodataold.setProductId(product.getProductId());
                prodataold.setProductName(product.getProductName());
                prodataold.setProductTypes(product.getProductTypes());
                prodataold.setProductPrice(product.getProductPrice());
                prodataold.setProductDetails(product.getProductDetails());
                prodataold.merge();
                return new ResponseEntity<String>(headers, HttpStatus.OK);

            } else {
                productservice.updateproductdata(product, multipartdata);
                return new ResponseEntity<String>(headers, HttpStatus.OK);
            }

        } catch (Exception e) {
            LOGGER.error("update:{}", e);
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}
