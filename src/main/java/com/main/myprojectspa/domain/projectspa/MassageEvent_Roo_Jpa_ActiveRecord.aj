// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.domain.projectspa;

import com.main.myprojectspa.domain.projectspa.MassageEvent;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MassageEvent_Roo_Jpa_ActiveRecord {
    
    public static final List<String> MassageEvent.fieldNames4OrderClauseFilter = java.util.Arrays.asList("eventStartTime", "eventEndTime", "userReserve", "massage", "employee");
    
    public static long MassageEvent.countMassageEvents() {
        return entityManager().createQuery("SELECT COUNT(o) FROM MassageEvent o", Long.class).getSingleResult();
    }
    
    public static List<MassageEvent> MassageEvent.findAllMassageEvents() {
        return entityManager().createQuery("SELECT o FROM MassageEvent o", MassageEvent.class).getResultList();
    }
    
    public static List<MassageEvent> MassageEvent.findAllMassageEvents(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM MassageEvent o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, MassageEvent.class).getResultList();
    }
    
    public static MassageEvent MassageEvent.findMassageEvent(Long id) {
        if (id == null) return null;
        return entityManager().find(MassageEvent.class, id);
    }
    
    public static List<MassageEvent> MassageEvent.findMassageEventEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM MassageEvent o", MassageEvent.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<MassageEvent> MassageEvent.findMassageEventEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM MassageEvent o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, MassageEvent.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public MassageEvent MassageEvent.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        MassageEvent merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
