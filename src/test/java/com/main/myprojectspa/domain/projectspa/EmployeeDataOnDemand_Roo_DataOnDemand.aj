// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.domain.projectspa;

import com.main.myprojectspa.domain.projectspa.Employee;
import com.main.myprojectspa.domain.projectspa.EmployeeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EmployeeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmployeeDataOnDemand: @Component;
    
    private Random EmployeeDataOnDemand.rnd = new SecureRandom();
    
    private List<Employee> EmployeeDataOnDemand.data;
    
    public Employee EmployeeDataOnDemand.getNewTransientEmployee(int index) {
        Employee obj = new Employee();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setEmpAddr(obj, index);
        setEmpCode(obj, index);
        setEmpEmail(obj, index);
        setEmpName(obj, index);
        setEmpTel(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void EmployeeDataOnDemand.setCreatedBy(Employee obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void EmployeeDataOnDemand.setCreatedDate(Employee obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void EmployeeDataOnDemand.setEmpAddr(Employee obj, int index) {
        String empAddr = "empAddr_" + index;
        obj.setEmpAddr(empAddr);
    }
    
    public void EmployeeDataOnDemand.setEmpCode(Employee obj, int index) {
        String empCode = "empCode_" + index;
        obj.setEmpCode(empCode);
    }
    
    public void EmployeeDataOnDemand.setEmpEmail(Employee obj, int index) {
        String empEmail = "foo" + index + "@bar.com";
        obj.setEmpEmail(empEmail);
    }
    
    public void EmployeeDataOnDemand.setEmpName(Employee obj, int index) {
        String empName = "empName_" + index;
        obj.setEmpName(empName);
    }
    
    public void EmployeeDataOnDemand.setEmpTel(Employee obj, int index) {
        String empTel = "empTel_" + index;
        obj.setEmpTel(empTel);
    }
    
    public void EmployeeDataOnDemand.setStatus(Employee obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void EmployeeDataOnDemand.setUpdatedBy(Employee obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void EmployeeDataOnDemand.setUpdatedDate(Employee obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public Employee EmployeeDataOnDemand.getSpecificEmployee(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Employee obj = data.get(index);
        Long id = obj.getId();
        return Employee.findEmployee(id);
    }
    
    public Employee EmployeeDataOnDemand.getRandomEmployee() {
        init();
        Employee obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Employee.findEmployee(id);
    }
    
    public boolean EmployeeDataOnDemand.modifyEmployee(Employee obj) {
        return false;
    }
    
    public void EmployeeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Employee.findEmployeeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Employee' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Employee>();
        for (int i = 0; i < 10; i++) {
            Employee obj = getNewTransientEmployee(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
