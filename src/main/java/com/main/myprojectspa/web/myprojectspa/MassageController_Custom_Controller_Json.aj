// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.web.myprojectspa;

import com.main.myprojectspa.domain.projectspa.Massage;
import com.main.myprojectspa.web.myprojectspa.MassageController;
import java.util.List;

import flexjson.JSONSerializer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect MassageController_Custom_Controller_Json {

    @RequestMapping(value = "/findMassagebyTypeId/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MassageController.findMassagebyTypeId(@PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Massage> massage = Massage.findmassagebytype(id);
            if (massage.size() == 0) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
            return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                    .include("id")
                    .include("version")
                    .include("massageCode")
                    .include("massageName")
                    .include("massageTime")
                    .include("massageprice")
                    .exclude("*")
                    .deepSerialize(massage)),headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/findallmassage", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MassageController.findallmassage() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Massage> massage = Massage.findAllMassages();
            return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                    .include("id")
                    .include("version")
                    .include("massageCode")
                    .include("massageName")
                    .include("massageTime")
                    .include("massageTypes.id")
                    .include("massageTypes.version")
                    .include("massageTypes.massageTypeName")
                    .include("massageDetail")
                    .exclude("*")
                    .deepSerialize(massage)), headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

//    @RequestMapping(value="/creatmassage",method = RequestMethod.POST, headers = "Accept=application/json")
//    public ResponseEntity<String> MassageController.creatmassage(@RequestBody String json){
//        ResponseEntity<String> status = null;
//        HttpHeaders headers = new HttpHeaders();
//        headers.add("Content-Type", "application/json");
//        Massage massage = Massage.fromJsonToMassage(json);
//        try {
//            //List<Massage> list = Massage.createmassage(massage.getMassageCode(),massage.getMassageName());
//            if(list.size() == 0){
//                massage.persist();
//                status = new ResponseEntity<String>(headers, HttpStatus.CREATED);
//            } else {
//                status = new ResponseEntity<String>(headers, HttpStatus.CONFLICT);
//            }
//            return status;
//        } catch (Exception e) {
//            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
//        }
//    }

}
