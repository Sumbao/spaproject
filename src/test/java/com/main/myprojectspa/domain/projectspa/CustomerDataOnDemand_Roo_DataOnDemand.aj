// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.domain.projectspa;

import com.main.myprojectspa.domain.projectspa.Customer;
import com.main.myprojectspa.domain.projectspa.CustomerDataOnDemand;
import com.main.myprojectspa.domain.projectspa.CustomerTypeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CustomerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CustomerDataOnDemand: @Component;
    
    private Random CustomerDataOnDemand.rnd = new SecureRandom();
    
    private List<Customer> CustomerDataOnDemand.data;
    
    @Autowired
    CustomerTypeDataOnDemand CustomerDataOnDemand.customerTypeDataOnDemand;
    
    public Customer CustomerDataOnDemand.getNewTransientCustomer(int index) {
        Customer obj = new Customer();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setCustomerAddr(obj, index);
        setCustomerAge(obj, index);
        setCustomerBirthDay(obj, index);
        setCustomerEmail(obj, index);
        setCustomerName(obj, index);
        setCustomerTel(obj, index);
        setLoginstatus(obj, index);
        setPassword(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void CustomerDataOnDemand.setCreatedBy(Customer obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void CustomerDataOnDemand.setCreatedDate(Customer obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void CustomerDataOnDemand.setCustomerAddr(Customer obj, int index) {
        String customerAddr = "customerAddr_" + index;
        obj.setCustomerAddr(customerAddr);
    }
    
    public void CustomerDataOnDemand.setCustomerAge(Customer obj, int index) {
        Integer customerAge = new Integer(index);
        obj.setCustomerAge(customerAge);
    }
    
    public void CustomerDataOnDemand.setCustomerBirthDay(Customer obj, int index) {
        Date customerBirthDay = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCustomerBirthDay(customerBirthDay);
    }
    
    public void CustomerDataOnDemand.setCustomerEmail(Customer obj, int index) {
        String customerEmail = "foo" + index + "@bar.com";
        obj.setCustomerEmail(customerEmail);
    }
    
    public void CustomerDataOnDemand.setCustomerName(Customer obj, int index) {
        String customerName = "customerName_" + index;
        obj.setCustomerName(customerName);
    }
    
    public void CustomerDataOnDemand.setCustomerTel(Customer obj, int index) {
        String customerTel = "customerTel_" + index;
        obj.setCustomerTel(customerTel);
    }
    
    public void CustomerDataOnDemand.setLoginstatus(Customer obj, int index) {
        Boolean loginstatus = true;
        obj.setLoginstatus(loginstatus);
    }
    
    public void CustomerDataOnDemand.setPassword(Customer obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void CustomerDataOnDemand.setStatus(Customer obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void CustomerDataOnDemand.setUpdatedBy(Customer obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void CustomerDataOnDemand.setUpdatedDate(Customer obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public void CustomerDataOnDemand.setUsername(Customer obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public Customer CustomerDataOnDemand.getSpecificCustomer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Customer obj = data.get(index);
        Long id = obj.getId();
        return Customer.findCustomer(id);
    }
    
    public Customer CustomerDataOnDemand.getRandomCustomer() {
        init();
        Customer obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Customer.findCustomer(id);
    }
    
    public boolean CustomerDataOnDemand.modifyCustomer(Customer obj) {
        return false;
    }
    
    public void CustomerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Customer.findCustomerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Customer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Customer>();
        for (int i = 0; i < 10; i++) {
            Customer obj = getNewTransientCustomer(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
