// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.web.myprojectspa;

import com.main.myprojectspa.domain.projectspa.Employee;
import com.main.myprojectspa.web.myprojectspa.EmployeeController;

import java.io.IOException;
import java.util.List;

import flexjson.JSONSerializer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect EmployeeController_Custom_Controller_Json {

    @RequestMapping(value="/findalldataemployee",headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> EmployeeController.findalldataemployee() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Employee> result = Employee.findAllEmployees();
            return new ResponseEntity<String>(Employee.toJsonArray(result), headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value="/createmployee",method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> EmployeeController.createmployee(@RequestBody String json){
        ResponseEntity<String> status = null;
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Employee employee = Employee.fromJsonToEmployee(json);
        try {
            List<Employee> list = Employee.findEmpbyCode(employee.getEmpCode());
            if(list.size() == 0){
                employee.persist();
                status = new ResponseEntity<String>(headers, HttpStatus.CREATED);
            } else {
                status = new ResponseEntity<String>(headers, HttpStatus.CONFLICT);
            }
            return status;
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @RequestMapping(value ="/findempbyid/{id}",method = RequestMethod.GET,headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> EmployeeController.findempbyid(@PathVariable("id") Long id) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Employee> employee = Employee.findEmpbyId(id);
            if (employee == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }

            return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                    .include("id")
                    .include("version")
                    .include("empCode")
                    .include("empName")
                    .include("empAddr")
                    .include("empTel")
                    .include("empEmail")
                    .exclude("*")
                    .deepSerialize(employee)),headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
