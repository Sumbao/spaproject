// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.web.myprojectspa;

import com.main.myprojectspa.domain.projectspa.Information;
import com.main.myprojectspa.domain.projectspa.util.ApplicationConstant;
import com.main.myprojectspa.web.myprojectspa.InformationController;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

import flexjson.JSONSerializer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.util.UriComponentsBuilder;

import javax.activation.MimetypesFileTypeMap;
import javax.servlet.http.HttpServletResponse;

privileged aspect InformationController_Custom_Controller_Json {

    @RequestMapping(value = "/findallinformation", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> InformationController.findallinformation() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Information> result = Information.findAllInformations();
            return new ResponseEntity<String>(Information.toJsonArray(result), headers, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/createinformation", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> InformationController.createinformation(MultipartHttpServletRequest multipartHttpServletRequest) throws IOException {
        ResponseEntity<String> status = null;
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            MultipartFile multipathFile = multipartHttpServletRequest.getFile("inforfile");
            String json = multipartHttpServletRequest.getParameter("json");
            Information information = Information.fromJsonToInformation(json);
            List<Information> infolist = Information.createInformation(information.getInformationName());
            if (infolist.size() == 0) {
                byte[] bytes = multipathFile.getBytes();
                File path = new File(ApplicationConstant.PATH_FILE + multipathFile.getOriginalFilename());
                FileCopyUtils.copy(bytes, new FileOutputStream(path));
                information.persist();
                return status = new ResponseEntity<String>(headers, HttpStatus.CREATED);
            } else {
                return status = new ResponseEntity<String>(headers, HttpStatus.CONFLICT);
            }
        } catch (Exception e) {
            LOGGER.error("create:{}", e);
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/loadinformationimage/{id}", method = RequestMethod.GET)
    public ResponseEntity<String> InformationController.loadinformationimage(@PathVariable("id") Long id, HttpServletResponse response) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {

            Information information = Information.findInformation(id);
            String filename = information.getInformationPictureName();
            String mimeType = new MimetypesFileTypeMap().getContentType(filename);
            response.setContentType(mimeType);
            String imagePath = ApplicationConstant.PATH_FILE + filename;
            File image = new File(imagePath);
            Files.copy(image.toPath(), response.getOutputStream());

            return new ResponseEntity<String>(headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error("Error : {}", e);
            e.printStackTrace();
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value ="/findInformation/{id}",method = RequestMethod.GET,headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> InformationController.findInformation(@PathVariable("id") Long id) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        try {
            List<Information> information = Information.findbyinforId(id);
            if (information == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }

            return new ResponseEntity<String>((new JSONSerializer().exclude("*.class")
                    .include("productId")
                    .include("productName")
                    .include("productDetails")
                    .include("productPrice")
                    .exclude("*")
                    .deepSerialize(information)),headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error("Error : {}", e);
            e.printStackTrace();
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}
