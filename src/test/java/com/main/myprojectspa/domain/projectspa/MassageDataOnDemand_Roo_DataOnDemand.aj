// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.main.myprojectspa.domain.projectspa;

import com.main.myprojectspa.domain.projectspa.Massage;
import com.main.myprojectspa.domain.projectspa.MassageDataOnDemand;
import com.main.myprojectspa.domain.projectspa.MassageTypesDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MassageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MassageDataOnDemand: @Component;
    
    private Random MassageDataOnDemand.rnd = new SecureRandom();
    
    private List<Massage> MassageDataOnDemand.data;
    
    @Autowired
    MassageTypesDataOnDemand MassageDataOnDemand.massageTypesDataOnDemand;
    
    public Massage MassageDataOnDemand.getNewTransientMassage(int index) {
        Massage obj = new Massage();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setMassageCode(obj, index);
        setMassageDetail(obj, index);
        setMassageName(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void MassageDataOnDemand.setCreatedBy(Massage obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void MassageDataOnDemand.setCreatedDate(Massage obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void MassageDataOnDemand.setMassageCode(Massage obj, int index) {
        String massageCode = "massageCode_" + index;
        obj.setMassageCode(massageCode);
    }
    
    public void MassageDataOnDemand.setMassageDetail(Massage obj, int index) {
        String massageDetail = "massageDetail_" + index;
        obj.setMassageDetail(massageDetail);
    }
    
    public void MassageDataOnDemand.setMassageName(Massage obj, int index) {
        String massageName = "massageName_" + index;
        obj.setMassageName(massageName);
    }
    
    public void MassageDataOnDemand.setStatus(Massage obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void MassageDataOnDemand.setUpdatedBy(Massage obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void MassageDataOnDemand.setUpdatedDate(Massage obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public Massage MassageDataOnDemand.getSpecificMassage(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Massage obj = data.get(index);
        Long id = obj.getId();
        return Massage.findMassage(id);
    }
    
    public Massage MassageDataOnDemand.getRandomMassage() {
        init();
        Massage obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Massage.findMassage(id);
    }
    
    public boolean MassageDataOnDemand.modifyMassage(Massage obj) {
        return false;
    }
    
    public void MassageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Massage.findMassageEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Massage' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Massage>();
        for (int i = 0; i < 10; i++) {
            Massage obj = getNewTransientMassage(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
